package domain

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/loms/internal/domain.NotificationsSender -o ./zzz_ns_minimock_test.go -n NotificationsSenderMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// NotificationsSenderMock implements NotificationsSender
type NotificationsSenderMock struct {
	t minimock.Tester

	funcSendOrder          func(order *Order) (err error)
	inspectFuncSendOrder   func(order *Order)
	afterSendOrderCounter  uint64
	beforeSendOrderCounter uint64
	SendOrderMock          mNotificationsSenderMockSendOrder
}

// NewNotificationsSenderMock returns a mock for NotificationsSender
func NewNotificationsSenderMock(t minimock.Tester) *NotificationsSenderMock {
	m := &NotificationsSenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendOrderMock = mNotificationsSenderMockSendOrder{mock: m}
	m.SendOrderMock.callArgs = []*NotificationsSenderMockSendOrderParams{}

	return m
}

type mNotificationsSenderMockSendOrder struct {
	mock               *NotificationsSenderMock
	defaultExpectation *NotificationsSenderMockSendOrderExpectation
	expectations       []*NotificationsSenderMockSendOrderExpectation

	callArgs []*NotificationsSenderMockSendOrderParams
	mutex    sync.RWMutex
}

// NotificationsSenderMockSendOrderExpectation specifies expectation struct of the NotificationsSender.SendOrder
type NotificationsSenderMockSendOrderExpectation struct {
	mock    *NotificationsSenderMock
	params  *NotificationsSenderMockSendOrderParams
	results *NotificationsSenderMockSendOrderResults
	Counter uint64
}

// NotificationsSenderMockSendOrderParams contains parameters of the NotificationsSender.SendOrder
type NotificationsSenderMockSendOrderParams struct {
	order *Order
}

// NotificationsSenderMockSendOrderResults contains results of the NotificationsSender.SendOrder
type NotificationsSenderMockSendOrderResults struct {
	err error
}

// Expect sets up expected params for NotificationsSender.SendOrder
func (mmSendOrder *mNotificationsSenderMockSendOrder) Expect(order *Order) *mNotificationsSenderMockSendOrder {
	if mmSendOrder.mock.funcSendOrder != nil {
		mmSendOrder.mock.t.Fatalf("NotificationsSenderMock.SendOrder mock is already set by Set")
	}

	if mmSendOrder.defaultExpectation == nil {
		mmSendOrder.defaultExpectation = &NotificationsSenderMockSendOrderExpectation{}
	}

	mmSendOrder.defaultExpectation.params = &NotificationsSenderMockSendOrderParams{order}
	for _, e := range mmSendOrder.expectations {
		if minimock.Equal(e.params, mmSendOrder.defaultExpectation.params) {
			mmSendOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendOrder.defaultExpectation.params)
		}
	}

	return mmSendOrder
}

// Inspect accepts an inspector function that has same arguments as the NotificationsSender.SendOrder
func (mmSendOrder *mNotificationsSenderMockSendOrder) Inspect(f func(order *Order)) *mNotificationsSenderMockSendOrder {
	if mmSendOrder.mock.inspectFuncSendOrder != nil {
		mmSendOrder.mock.t.Fatalf("Inspect function is already set for NotificationsSenderMock.SendOrder")
	}

	mmSendOrder.mock.inspectFuncSendOrder = f

	return mmSendOrder
}

// Return sets up results that will be returned by NotificationsSender.SendOrder
func (mmSendOrder *mNotificationsSenderMockSendOrder) Return(err error) *NotificationsSenderMock {
	if mmSendOrder.mock.funcSendOrder != nil {
		mmSendOrder.mock.t.Fatalf("NotificationsSenderMock.SendOrder mock is already set by Set")
	}

	if mmSendOrder.defaultExpectation == nil {
		mmSendOrder.defaultExpectation = &NotificationsSenderMockSendOrderExpectation{mock: mmSendOrder.mock}
	}
	mmSendOrder.defaultExpectation.results = &NotificationsSenderMockSendOrderResults{err}
	return mmSendOrder.mock
}

// Set uses given function f to mock the NotificationsSender.SendOrder method
func (mmSendOrder *mNotificationsSenderMockSendOrder) Set(f func(order *Order) (err error)) *NotificationsSenderMock {
	if mmSendOrder.defaultExpectation != nil {
		mmSendOrder.mock.t.Fatalf("Default expectation is already set for the NotificationsSender.SendOrder method")
	}

	if len(mmSendOrder.expectations) > 0 {
		mmSendOrder.mock.t.Fatalf("Some expectations are already set for the NotificationsSender.SendOrder method")
	}

	mmSendOrder.mock.funcSendOrder = f
	return mmSendOrder.mock
}

// When sets expectation for the NotificationsSender.SendOrder which will trigger the result defined by the following
// Then helper
func (mmSendOrder *mNotificationsSenderMockSendOrder) When(order *Order) *NotificationsSenderMockSendOrderExpectation {
	if mmSendOrder.mock.funcSendOrder != nil {
		mmSendOrder.mock.t.Fatalf("NotificationsSenderMock.SendOrder mock is already set by Set")
	}

	expectation := &NotificationsSenderMockSendOrderExpectation{
		mock:   mmSendOrder.mock,
		params: &NotificationsSenderMockSendOrderParams{order},
	}
	mmSendOrder.expectations = append(mmSendOrder.expectations, expectation)
	return expectation
}

// Then sets up NotificationsSender.SendOrder return parameters for the expectation previously defined by the When method
func (e *NotificationsSenderMockSendOrderExpectation) Then(err error) *NotificationsSenderMock {
	e.results = &NotificationsSenderMockSendOrderResults{err}
	return e.mock
}

// SendOrder implements NotificationsSender
func (mmSendOrder *NotificationsSenderMock) SendOrder(order *Order) (err error) {
	mm_atomic.AddUint64(&mmSendOrder.beforeSendOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmSendOrder.afterSendOrderCounter, 1)

	if mmSendOrder.inspectFuncSendOrder != nil {
		mmSendOrder.inspectFuncSendOrder(order)
	}

	mm_params := &NotificationsSenderMockSendOrderParams{order}

	// Record call args
	mmSendOrder.SendOrderMock.mutex.Lock()
	mmSendOrder.SendOrderMock.callArgs = append(mmSendOrder.SendOrderMock.callArgs, mm_params)
	mmSendOrder.SendOrderMock.mutex.Unlock()

	for _, e := range mmSendOrder.SendOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendOrder.SendOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendOrder.SendOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmSendOrder.SendOrderMock.defaultExpectation.params
		mm_got := NotificationsSenderMockSendOrderParams{order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendOrder.t.Errorf("NotificationsSenderMock.SendOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendOrder.SendOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmSendOrder.t.Fatal("No results are set for the NotificationsSenderMock.SendOrder")
		}
		return (*mm_results).err
	}
	if mmSendOrder.funcSendOrder != nil {
		return mmSendOrder.funcSendOrder(order)
	}
	mmSendOrder.t.Fatalf("Unexpected call to NotificationsSenderMock.SendOrder. %v", order)
	return
}

// SendOrderAfterCounter returns a count of finished NotificationsSenderMock.SendOrder invocations
func (mmSendOrder *NotificationsSenderMock) SendOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendOrder.afterSendOrderCounter)
}

// SendOrderBeforeCounter returns a count of NotificationsSenderMock.SendOrder invocations
func (mmSendOrder *NotificationsSenderMock) SendOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendOrder.beforeSendOrderCounter)
}

// Calls returns a list of arguments used in each call to NotificationsSenderMock.SendOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendOrder *mNotificationsSenderMockSendOrder) Calls() []*NotificationsSenderMockSendOrderParams {
	mmSendOrder.mutex.RLock()

	argCopy := make([]*NotificationsSenderMockSendOrderParams, len(mmSendOrder.callArgs))
	copy(argCopy, mmSendOrder.callArgs)

	mmSendOrder.mutex.RUnlock()

	return argCopy
}

// MinimockSendOrderDone returns true if the count of the SendOrder invocations corresponds
// the number of defined expectations
func (m *NotificationsSenderMock) MinimockSendOrderDone() bool {
	for _, e := range m.SendOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendOrder != nil && mm_atomic.LoadUint64(&m.afterSendOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendOrderInspect logs each unmet expectation
func (m *NotificationsSenderMock) MinimockSendOrderInspect() {
	for _, e := range m.SendOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NotificationsSenderMock.SendOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendOrderCounter) < 1 {
		if m.SendOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NotificationsSenderMock.SendOrder")
		} else {
			m.t.Errorf("Expected call to NotificationsSenderMock.SendOrder with params: %#v", *m.SendOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendOrder != nil && mm_atomic.LoadUint64(&m.afterSendOrderCounter) < 1 {
		m.t.Error("Expected call to NotificationsSenderMock.SendOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NotificationsSenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendOrderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NotificationsSenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NotificationsSenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendOrderDone()
}
